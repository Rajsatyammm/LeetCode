class Solution {
    private int minCost(int[] cost, int[] dp, int n) {
        if(n<=1) return 0;
        if(n==2) return Math.min(cost[0], cost[1]);
        if(dp[n] != -1) return dp[n];

        dp[n] = Math.min(minCost(cost, dp, n-1) + cost[n-1], minCost(cost, dp, n-2) + cost[n-2]);
        return dp[n];
    }
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return minCost(cost, dp, n);
    }
}
